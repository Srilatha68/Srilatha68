pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c dogs-vs-cats

!ls

# extracting the compresed file
from zipfile import ZipFile

dataset = '/content/dogs-vs-cats.zip'

with ZipFile(dataset, 'r')as zip:
  zip.extractall()
  print("the dataset is extracted")

 # extracting the compresed file
from zipfile import ZipFile

dataset = '/content/train.zip'

with ZipFile(dataset, 'r')as zip:
  zip.extractall()
  print("the dataset is extracted")
import os
path,dirs,files = next(os.walk('/content/train'))
file_count = len(files)
print('number of images:',file_count)

file_names = os.listdir('/content/train')
print(file_names)

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from sklearn.model_selection import train_test_split
from google.colab.patches import cv2_imshow

img = mpimg.imread('/content/train/dog.12326.jpg')
imgplt = plt.imshow(img)
plt.show()

img = mpimg.imread('/content/train/cat.3476.jpg')
imgplt = plt.imshow(img)
plt.show()

#resizing all the images
file_names  = os.listdir('/content/train')

for i in range(5):
  name = file_names[i]
  print(name[0:3])

 file_names  = os.listdir('/content/train')

dog_count=0
cat_count=0

for img_file in file_names:

  name=img_file[0:3]

  if name=="dog":
    dog_count+=1

  else:
    cat_count+=1

print("number of dog images=",dog_count)
print("number of cat images=",cat_count)

#creating a directory for resized images
os.mkdir('/content/image resized')

original_folder='/content/train/'
resized_folder='/content/image resized/'

for i in range(2000):
  filename=os.listdir(original_folder)[i]
  img_path=original_folder+filename

  img=Image.open(img_path)
  img=img.resize((224,224))
  img=img.convert('RGB')

  newImgPath=resized_folder+filename
  img.save(newImgPath)

  img = mpimg.imread('/content/image resized/dog.12326.jpg')
imgplt = plt.imshow(img)
plt.show()

img = mpimg.imread('/content/image resized/cat.3476.jpg')
imgplt = plt.imshow(img)
plt.show()

#create a forloop to assign labels
filenames  = os.listdir('/content/image resized/')

labels=[]

for i in range(2000):
  file_name=filenames[i]
  label=file_name[0:3]

  if label=='dog':
    labels.append(1)
  else:
    labels.append(0)

  print(filenames[0:5])
print(len(filenames))

print(labels[0:5])
print(len(labels))

#counting the images of dogs anf cats
values,counts=np.unique(labels,return_counts=True)
print(values)
print(counts)

#converting all the resized images to numpy arrays
import cv2
import glob

image_directory='/content/image resized/'
image_extension=['jpg']

files=[]

[files.extend(glob.glob(image_directory + '*.' + e))for e in image_extension]

dog_cat_images = np.asarray([cv2.imread(file) for file in files])

print(dog_cat_images)

typep

print(dog_cat_images.shape)

x=dog_cat_images
y=np.array(labels)

x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.2,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

#scaling the data
x_train_scaled=x_train/255

x_test_scaled=x_test/255

print(x_train_scaled)

#building the neural network
import tensorflow as tf
import tensorflow_hub as hub

mobilenet_model = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4'

pretrained_model = hub.KerasLayer (mobilenet_model, input_shape=(224,224,3), trainable=False)

num_of_classes=2

model=tf.keras.Sequential([

    pretrained_model,
    tf.keras.layers.Dense(num_of_classes)

])

model.summary()

model.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=['acc']

)

model.fit(x_train_scaled,y_train,epochs=5)

score,acc=model.evaluate(x_test_scaled,y_test)
print('Test Loss=',score)
print('Test Accuracy=',acc)

input_image_path=input('Path of the image to be predicted: ')

input_image=cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resize=cv2.resize(input_image,(224,224))

input_image_scaled=input_image_resize/225

image_reshaped=np.reshape(input_image_scaled, [1,224,224,3])

input_prediction=model.predict(image_reshaped)

print(input_prediction)

input_pred_label=np.argmax(input_prediction)

print(input_prediction)

if input_pred_label==0:
  print('the image represents a Cat')

elif input_pred_label==1:
  print('the image represents a Dog')

else:
  print('the image represents other animals')




  pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c dogs-vs-cats

!ls

# extracting the compresed file
from zipfile import ZipFile

dataset = '/content/dogs-vs-cats.zip'

with ZipFile(dataset, 'r')as zip:
  zip.extractall()
  print("the dataset is extracted")

 # extracting the compresed file
from zipfile import ZipFile

dataset = '/content/train.zip'

with ZipFile(dataset, 'r')as zip:
  zip.extractall()
  print("the dataset is extracted")
import os
path,dirs,files = next(os.walk('/content/train'))
file_count = len(files)
print('number of images:',file_count)

file_names = os.listdir('/content/train')
print(file_names)

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from sklearn.model_selection import train_test_split
from google.colab.patches import cv2_imshow

img = mpimg.imread('/content/train/dog.12326.jpg')
imgplt = plt.imshow(img)
plt.show()

img = mpimg.imread('/content/train/cat.3476.jpg')
imgplt = plt.imshow(img)
plt.show()

#resizing all the images
file_names  = os.listdir('/content/train')

for i in range(5):
  name = file_names[i]
  print(name[0:3])

 file_names  = os.listdir('/content/train')

dog_count=0
cat_count=0

for img_file in file_names:

  name=img_file[0:3]

  if name=="dog":
    dog_count+=1

  else:
    cat_count+=1

print("number of dog images=",dog_count)
print("number of cat images=",cat_count)

#creating a directory for resized images
os.mkdir('/content/image resized')

original_folder='/content/train/'
resized_folder='/content/image resized/'

for i in range(2000):
  filename=os.listdir(original_folder)[i]
  img_path=original_folder+filename

  img=Image.open(img_path)
  img=img.resize((224,224))
  img=img.convert('RGB')

  newImgPath=resized_folder+filename
  img.save(newImgPath)

  img = mpimg.imread('/content/image resized/dog.12326.jpg')
imgplt = plt.imshow(img)
plt.show()

img = mpimg.imread('/content/image resized/cat.3476.jpg')
imgplt = plt.imshow(img)
plt.show()

#create a forloop to assign labels
filenames  = os.listdir('/content/image resized/')

labels=[]

for i in range(2000):
  file_name=filenames[i]
  label=file_name[0:3]

  if label=='dog':
    labels.append(1)
  else:
    labels.append(0)

  print(filenames[0:5])
print(len(filenames))

print(labels[0:5])
print(len(labels))

#counting the images of dogs anf cats
values,counts=np.unique(labels,return_counts=True)
print(values)
print(counts)

#converting all the resized images to numpy arrays
import cv2
import glob

image_directory='/content/image resized/'
image_extension=['jpg']

files=[]

[files.extend(glob.glob(image_directory + '*.' + e))for e in image_extension]

dog_cat_images = np.asarray([cv2.imread(file) for file in files])

print(dog_cat_images)

typep

print(dog_cat_images.shape)

x=dog_cat_images
y=np.array(labels)

x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.2,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

#scaling the data
x_train_scaled=x_train/255

x_test_scaled=x_test/255

print(x_train_scaled)

#building the neural network
import tensorflow as tf
import tensorflow_hub as hub

mobilenet_model = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4'

pretrained_model = hub.KerasLayer (mobilenet_model, input_shape=(224,224,3), trainable=False)

num_of_classes=2

model=tf.keras.Sequential([

    pretrained_model,
    tf.keras.layers.Dense(num_of_classes)

])

model.summary()

model.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=['acc']

)

model.fit(x_train_scaled,y_train,epochs=5)

score,acc=model.evaluate(x_test_scaled,y_test)
print('Test Loss=',score)
print('Test Accuracy=',acc)

input_image_path=input('Path of the image to be predicted: ')

input_image=cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resize=cv2.resize(input_image,(224,224))

input_image_scaled=input_image_resize/225

image_reshaped=np.reshape(input_image_scaled, [1,224,224,3])

input_prediction=model.predict(image_reshaped)

print(input_prediction)

input_pred_label=np.argmax(input_prediction)

print(input_prediction)

if input_pred_label==0:
  print('the image represents a Cat')

elif input_pred_label==1:
  print('the image represents a Dog')

else:
  print('the image represents other animals')
